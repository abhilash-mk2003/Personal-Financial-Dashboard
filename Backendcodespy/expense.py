# -*- coding: utf-8 -*-
"""catigrizor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z10-JASoP8CcAKUxyEEhTYXrqicO1j3t
"""

import sqlite3

from typing import List, Dict
import numpy as np
import matplotlib.pyplot as plt

categories = {
    "Transport": ["Travel", "Travelling","car", "bus", "train", "plane", "bicycle", "motorcycle", "taxi", "uber", "lyft", "scooter", "skateboard", "rollerblades", "segway", "hoverboard", "unicycle", "rickshaw", "tuk-tuk", "rickshaw", "jeepney", "dolmus", "matatu", "tro-tro", "dala-dala", "pesero", "collectivo", "marshrutka", "minibus", "van", "truck", "lorry", "trailer", "container", "ship", "boat", "ferry", "yacht", "cruise ship", "submarine", "airship", "blimp", "hot air balloon", "rocket", "space shuttle", "satellite","flight", "hotel", "car rental", "cruise", "train", "bus", "road trip", "backpacking", "hiking", "camping", "beach vacation", "mountain retreat", "city tour", "safari", "desert adventure", "island hopping", "skiing", "snowboarding", "surfing", "kayaking", "cycling", "motorcycling", "sightseeing", "historical landmarks", "museum", "national park", "theme park", "zoo", "aquarium", "botanical garden", "cultural festival", "music festival", "food festival", "art gallery", "local markets", "shopping", "spa retreat", "wellness retreat", "yoga retreat", "adventure travel", "ecotourism", "volunteer abroad", "study abroad", "honeymoon", "family vacation", "solo travel", "group travel", "luxury travel", "budget travel", "digital nomad", "travel blogger", "travel photography", "travel writing", "travel insurance", "passport", "visa", "travel guidebook", "maps", "GPS", "travel apps", "foreign language", "translator", "travel budget", "travel itinerary", "travel planning", "travel agency", "tour operator", "airline", "hotel reservation", "rental car reservation", "cruise booking", "train ticket", "bus ticket", "travel safety", "emergency kit", "first aid", "travel health", "jet lag", "travel accommodation", "boutique hotel", "bed and breakfast", "hostel", "cabin", "villa", "resort", "cottage", "cultural exchange", "local cuisine", "street food", "culinary tour", "wine tasting", "local music", "dance", "carnival", "celebration", "parade", "fireworks", "local traditions", "customs", "souvenir", "postcard", "travel journal", "travel memories", "travel souvenirs", "sustainable travel", "responsible tourism", "carbon footprint", "eco-friendly travel", "green travel", "wildlife conservation", "nature reserve", "bird watching", "astronomy", "stargazing", "beach sunrise", "mountain sunset", "travel companions", "travel community", "travel forum", "travel meetup", "travel podcast", "travel documentary", "travel vlog", "travel influencer", "adventure gear", "backpack", "suitcase", "travel pillow", "travel adapter", "power bank", "camera", "binoculars", "travel technology", "smart luggage", "travel fashion", "travel essentials", "travel checklist", "travel rewards", "frequent flyer", "loyalty program", "travel credit card", "travel discounts", "travel agency", "tour package", "guided tour", "self-guided tour", "road atlas", "roadside attractions", "scenic drive", "hidden gems", "off the beaten path", "travel challenges"],
    "Food": ["bread", "chips", "cereal", "rice", "pasta", "noodles", "meat", "fish", "poultry", "eggs", "dairy", "fruits", "vegetables", "nuts", "seeds", "legumes", "spices", "herbs", "condiments", "sauces", "oils", "vinegars", "sugar", "salt", "pepper", "coffee", "tea", "soda", "juice", "beer", "wine", "liquor", "cigarettes", "tobacco", "candy", "snacks", "ice cream", "frozen food", "canned food", "packaged food", "processed food", "junk food","pizza", "burger", "pasta", "sushi", "taco", "salad", "steak", "ice cream", "smoothie", "sandwich", "soup", "barbecue", "ramen", "curry", "dumplings", "chocolate", "coffee", "tea", "cake", "cookies", "pancakes", "waffles", "bacon", "eggs", "avocado", "guacamole", "bagel", "croissant", "muffin", "lasagna", "hotdog", "falafel", "samosa", "gyro", "risotto", "quiche", "nachos", "popcorn", "fries", "ramen", "pho", "spring rolls", "shrimp", "lobster", "crab", "clam", "oyster", "calamari", "octopus", "caviar", "truffle", "hummus", "paella", "ceviche", "poutine", "pierogi", "casserole", "meatball", "meatloaf", "gravy", "potato", "carrot", "broccoli", "asparagus", "zucchini", "spinach", "kale", "quinoa", "couscous", "chickpea", "tofu", "seitan", "soy", "kimchi", "sauerkraut", "pickles", "mustard", "ketchup", "mayonnaise", "sriracha", "wasabi", "salsa", "guacamole", "honey", "maple syrup", "peanut butter", "jelly", "nutella", "granola", "yogurt", "cheese", "wine", "beer", "cocktail", "whiskey", "vodka", "rum", "tequila", "mocktail", "lemonade", "smoothie", "milkshake", "juice", "watermelon", "pineapple", "strawberry", "blueberry", "banana", "mango", "apple", "orange", "grape", "kiwi", "pomegranate", "watermelon", "melon", "coconut", "peach", "avocado", "blackberry", "raspberry", "cranberry", "fig", "pear", "plum", "apricot", "cherry", "lime", "lemon", "ginger", "garlic", "onion", "shallot", "cilantro", "parsley", "rosemary", "thyme", "basil", "mint", "dill", "oregano", "cinnamon", "nutmeg", "vanilla", "caramel", "marshmallow", "coconut", "cocoa", "matcha", "turmeric", "saffron", "pepper", "salt", "sesame", "chia", "flaxseed", "hemp", "almond", "cashew", "walnut", "pecan", "pistachio", "sunflower", "pumpkin", "chia", "flaxseed", "hemp", "oat", "barley", "rye", "spelt", "buckwheat", "corn", "rice", "millet", "sorghum", "quinoa", "couscous", "farro", "polenta", "amaranth", "tapioca", "bulgur", "sushi rice", "jasmine rice"],
    "Rent and bills": ["rent", "renting", "mortgage", "utilities", "electricity", "gas", "water", "trash", "sewer", "cable", "internet", "phone", "cell phone", "insurance", "homeowners insurance", "renters insurance", "car insurance", "health insurance", "life insurance", "disability insurance", "property tax", "income tax", "sales tax", "value-added tax", "luxury tax", "sin tax", "toll", "tariff", "quota", "embargo", "sanction","rent", "utilities", "electricity", "water", "gas", "internet", "cable", "phone bill", "rental agreement", "lease", "landlord", "property management", "rent due", "late fee", "mortgage", "property tax", "home insurance", "renter's insurance", "security deposit", "down payment", "housing cost", "apartment", "house", "condominium", "townhouse", "studio", "loft", "duplex", "sublet", "roommate", "co-living", "rental application", "credit check", "background check", "monthly rent", "annual rent", "rental period", "rental renewal", "rent increase", "eviction", "tenant rights", "property inspection", "maintenance request", "repair", "home improvement", "remodeling", "moving expenses", "moving company", "packing supplies", "storage unit", "furniture rental", "appliance rental", "renter's association", "neighborhood", "community", "amenities", "gated community", "pet-friendly", "parking", "commute", "public transportation", "renter's budget", "financial planning", "saving for rent", "budgeting", "income", "expenses", "emergency fund", "savings account", "personal finance", "financial goals", "bill payment", "auto-pay", "due date", "overdue", "billing statement", "itemized bill", "invoice", "receipt", "payment confirmation", "online payment", "bank transfer", "check", "money order", "cash payment", "bill negotiation", "discount", "late payment forgiveness", "fee waiver", "billing dispute", "financial hardship", "payment plan", "energy-efficient", "green building", "sustainable living", "zero-waste", "energy consumption", "smart home", "home automation", "digital thermostat", "energy-saving appliances", "water conservation", "recycling", "waste disposal", "composting", "home office", "deductible", "tax deduction", "renter's credit", "homeownership", "buying a home", "first-time homebuyer", "real estate market", "property value", "home equity", "home equity loan", "refinancing", "reverse mortgage", "foreclosure", "short sale", "real estate agent", "property listing", "open house", "home inspection", "closing costs", "title insurance", "escrow", "housing market trends", "rental market trends", "rental property investment", "landlord responsibilities", "tenant responsibilities", "rental dispute resolution", "renter's rights", "rental scams", "housing discrimination", "fair housing laws", "rental assistance programs", "low-income housing", "affordable housing", "housing subsidy", "government housing", "rental vouchers", "housing grants", "housing affordability", "rent control", "housing policy", "urban planning", "sustainable urban development", "housing market analysis", "rental property management", "property maintenance", "property value appreciation", "real estate investment", "property portfolio", "property management software", "tenant screening", "background check", "rental application process", "security deposit return", "tenant eviction process", "rental property inspection", "property marketing", "tenant retention", "lease agreement terms", "lease renewal negotiation", "property management fees", "rental property ROI", "rental property financing", "rental property tax deductions", "property depreciation", "property appreciation", "landlord insurance", "property management certification", "property management regulations", "property management technology", "property management business", "property management challenges", "property management success stories"],
    "Others": []
}

conn = sqlite3.connect('expenses.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS expenses (
        category TEXT PRIMARY KEY,
        total_expense REAL
    )
''')

def load_expenses() -> Dict[str, float]:
    cursor.execute('SELECT category, total_expense FROM expenses')
    rows = cursor.fetchall()
    loaded_expenses = {category: total_expense for category, total_expense in rows}

    for category in categories.keys():
        loaded_expenses.setdefault(category, 0.0)

    return loaded_expenses

def save_expenses(expenses: Dict[str, float]):
    cursor.execute('DELETE FROM expenses')

    for category, total_expense in expenses.items():
        cursor.execute('INSERT INTO expenses VALUES (?, ?)', (category, total_expense))

    conn.commit()

def jaccard_similarity(str1: str, str2: str) -> float:
    set1 = set(str1.lower().split())
    set2 = set(str2.lower().split())
    intersection = len(set1.intersection(set2))
    union = len(set1.union(set2))
    return intersection / union if union != 0 else 0

def classify_and_update_jaccard(input_str: str, categories: Dict[str, List[str]], expenses: Dict[str, float]):
    try:
        input_tokens = input_str.lower().split()

        max_similarity = 0
        assigned_category = None

        for category, keywords in categories.items():
            similarity = jaccard_similarity(' '.join(input_tokens), ' '.join(keywords))
            if similarity > max_similarity:
                max_similarity = similarity
                assigned_category = category

        if assigned_category and max_similarity > 0:
            amount = next((float(token) for token in input_tokens if token.replace('.', '', 1).isdigit()), 0)
            expenses[assigned_category] += amount
            print(f"Expense of {amount} added to category '{assigned_category}'. Total expenses in '{assigned_category}': {expenses[assigned_category]}")

        else:
            amount = next((float(token) for token in input_tokens if token.replace('.', '', 1).isdigit()), 0)
            expenses['Others'] += amount
            print(f"Expense of {amount} added to category 'Others'. Total expenses in 'Others': {expenses['Others']}")


        save_expenses(expenses)

        user_verification = input("Was the categorization correct? (yes/no): ").lower()
        if user_verification == "no":
            print("Choose a category:")
            for idx, category_name in enumerate(categories.keys(), start=1):
                print(f"{idx}. {category_name}")

            chosen_category_index = int(input("Enter the index of the correct category: ")) - 1
            if 0 <= chosen_category_index < len(categories):
                correct_category = list(categories.keys())[chosen_category_index]
                expenses[correct_category] += amount
                print(f"Expense moved to category '{correct_category}'. Total expenses in '{correct_category}': {expenses[correct_category]}")
            else:
                print("Invalid category index. No changes made.")

        print("\nTotal Expenses:")
        for category, total_expense in expenses.items():
            print(f"{category}: {total_expense}")

        user_continue = input("\nDo you wanna continue chatting with me? (Yes/ no): ").lower()
        return user_continue == "yes"

    except ValueError:
        print("Invalid input format. Please provide a valid input.")

expenses = load_expenses()

while True:
    user_input = input("Enter expense details: ")
    continue_chatting = classify_and_update_jaccard(user_input, categories, expenses)
    if not continue_chatting:
        print("\nHere's the user's budget graph:")

        categories_list = list(expenses.keys())
        total_expenses_list = list(expenses.values())

        colors = plt.cm.viridis(np.linspace(0, 1, len(categories_list)))

        plt.bar(categories_list, total_expenses_list, color=colors)
        plt.xlabel('Categories')
        plt.ylabel('Total Expenses')
        plt.title('Total Expenses by Category')

        plt.legend(categories_list, title='Categories', bbox_to_anchor=(1, 1), loc='upper left')

        plt.grid(axis='y', linestyle='--', alpha=0.7)

        plt.xticks(rotation=45, ha='right')


        plt.tight_layout()
        plt.show()
        save_expenses(expenses)

        conn.close()
        break